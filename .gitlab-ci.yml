variables:
   # The common part of the URL for cloning from within a CI
   GIT_CLONE_BASE: https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}
   PIP_INDEX_URL: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.adacore-it.com/api/v4/projects/it%2Fpackage-registry/packages/pypi/simple

.basic-setup:
  - |
    set -x
    export PATH=/it/e3/bin:$PATH
  - . ~/.aws_container_credentials

.detect-branches:
  #  Detects source and target branches.
  #    ADACORE_CI_SOURCE_BRANCH is set to source branch (merge request, pull)
  #    ADACORE_CI_TARGET_BRANCH is set to target branch of merge request, or 'master'/'edge' for pull
  #    ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX is set to '-edge' when target repository is 'edge'
  #    ADACORE_CI_ANOD_EDGE_QUALIFIER is set to '--qualifier=edge' when target repository is 'edge'
  #    ADACORE_CI_SUBPROJECTS_ROOT is set to '/tmp' and may be overritten by script
  - |
      if [[ -n "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ]]; then
        ADACORE_CI_TARGET_BRANCH="$CI_MERGE_REQUEST_TARGET_BRANCH_NAME";
      elif [[ "x$CI_COMMIT_BRANCH" == "xedge" ]]; then
        ADACORE_CI_TARGET_BRANCH="edge";
      else
        ADACORE_CI_TARGET_BRANCH="master";
      fi;
      if [[ -n "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" ]]; then
        ADACORE_CI_SOURCE_BRANCH="$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME";
      else
        ADACORE_CI_SOURCE_BRANCH="$CI_COMMIT_BRANCH";
      fi;
      if [[ "$ADACORE_CI_TARGET_BRANCH" == "edge" ]]; then
        ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX="-edge";
        ADACORE_CI_ANOD_EDGE_QUALIFIER="--qualifier=edge"
      else
        ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX="";
        ADACORE_CI_ANOD_EDGE_QUALIFIER=""
      fi
      ADACORE_CI_SUBPROJECTS_ROOT=/tmp
      echo "Source branch: $ADACORE_CI_SOURCE_BRANCH"
      echo "Target branch: $ADACORE_CI_TARGET_BRANCH"
      echo "Name suffix:   $ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX"
      echo "Qualifier:     $ADACORE_CI_ANOD_EDGE_QUALIFIER"
      echo "Subprojects:   $ADACORE_CI_SUBPROJECTS_ROOT"

.checkout:
  #  Variables:
  #    ADACODE_CI_SUBPROJECTS_ROOT  - root directory to checkout repositories.
  #    ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH - path component of the repository's URL.
  #    ADACORE_CI_SUBPROJECT_NAME - name of the directory for subproject.
  - |
    git -C $ADACORE_CI_SUBPROJECTS_ROOT clone $GIT_CLONE_BASE/$ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH $ADACORE_CI_SUBPROJECT_NAME
    if `git -C $ADACORE_CI_SUBPROJECTS_ROOT -C $ADACORE_CI_SUBPROJECT_NAME show-ref $ADACORE_CI_SOURCE_BRANCH > /dev/null`; then
      git -C $ADACORE_CI_SUBPROJECTS_ROOT -C $ADACORE_CI_SUBPROJECT_NAME checkout $ADACORE_CI_SOURCE_BRANCH;
    elif `git -C $ADACORE_CI_SUBPROJECTS_ROOT -C $ADACORE_CI_SUBPROJECT_NAME show-ref $ADACORE_CI_TARGET_BRANCH > /dev/null`; then
      git -C $ADACORE_CI_SUBPROJECTS_ROOT -C $ADACORE_CI_SUBPROJECT_NAME checkout $ADACORE_CI_TARGET_BRANCH;
    fi
    anod vcs --sandbox-dir /it/wave --add-repo $ADACORE_CI_SUBPROJECT_NAME $ADACORE_CI_SUBPROJECTS_ROOT/$ADACORE_CI_SUBPROJECT_NAME

stages:
  - build_and_test
  - build_dependent

#########
# BUILD #
#########

build_and_test:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: build_and_test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master' && $CI_COMMIT_TITLE =~ /Merge branch.*/
    - if: $CI_COMMIT_BRANCH == 'edge' && $CI_COMMIT_TITLE =~ /Merge branch.*/
  script:
    - !reference [.basic-setup]
    - !reference [.detect-branches]

    - |
      # Install GNAT (with gcov) and gcovr
      anod install --sandbox-dir /it/wave gnatall
      python3 -m pip install gcovr

      # Fetch tests' data into `./data/`
      PACKAGE=vss-tests-data.tar.bz2
      VSS_URL=https://gitlab.adacore-it.com/api/v4/projects/129
      curl -L --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        $VSS_URL/packages/generic/$PACKAGE/0.0.0/$PACKAGE |\
        tar xjf - -C ./data

      # Build VSS and run tests
      ( eval $(anod printenv --sandbox-dir /it/wave gnatall) ;\
        make COVERAGE_MODE=gcov build-libs-static check ;\
        ENABLE_GCOV=y gcovr --print-summary --cobertura gcov.xml )
      make clean

    # Run spell checker
    - make spellcheck_json

  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: gcov.xml
      codequality:
        - spellcheck.json

build_gnatdoc:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: build_dependent
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
  script:
    - !reference [.basic-setup]
    - !reference [.detect-branches]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/markdown
      ADACORE_CI_SUBPROJECT_NAME=markdown
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/gnatdoc
      ADACORE_CI_SUBPROJECT_NAME=gnatdoc$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX
    - !reference [.checkout]

    - |
      cd /it/wave

      # Tell the anod sandbox to use our repository
      anod vcs --add-repo vss$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX $CI_PROJECT_DIR

      # Build the ALS as a test
      anod build gnatdoc4 $ADACORE_CI_ANOD_EDGE_QUALIFIER

build_als:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: build_dependent
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
  script:
    - !reference [.basic-setup]
    - !reference [.detect-branches]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/markdown
      ADACORE_CI_SUBPROJECT_NAME=markdown
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/gnatdoc
      ADACORE_CI_SUBPROJECT_NAME=gnatdoc$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/ada_language_server
      ADACORE_CI_SUBPROJECT_NAME=ada_language_server$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX
    - !reference [.checkout]

    - |
      cd /it/wave

      # Tell the anod sandbox to use our repository
      anod vcs --add-repo vss$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX $CI_PROJECT_DIR

      # Build the ALS as a test
      anod build als $ADACORE_CI_ANOD_EDGE_QUALIFIER

build_gs:
  services:
     - image:gtk-deps
     - cpu:8
     - mem:16
  stage: build_dependent
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
  script:
    - !reference [.basic-setup]
    - !reference [.detect-branches]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/markdown
      ADACORE_CI_SUBPROJECT_NAME=markdown
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/gnatdoc
      ADACORE_CI_SUBPROJECT_NAME=gnatdoc$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/ada_language_server
      ADACORE_CI_SUBPROJECT_NAME=ada_language_server$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX
    - !reference [.checkout]

    - |
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/gnatstudio
      ADACORE_CI_SUBPROJECT_NAME=gnatstudio$ADACORE_CI_SUBPROJECT_REPOSITORY_NAME_EDGE_SUFFIX
    - !reference [.checkout]

    - |
      cd /it/wave

      # Tell the anod sandbox to use our repository
      anod vcs --add-repo vss $CI_PROJECT_DIR

      # Build the ALS as a test
      anod build gps $ADACORE_CI_ANOD_EDGE_QUALIFIER

build_lsif:
  services:
     - image:sandbox
     - cpu:8
     - mem:16
  stage: build_dependent
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG
  script:
    - !reference [.basic-setup]
    - !reference [.detect-branches]

    - |
      export GPR_PROJECT_PATH=`pwd`/gnat:$GPR_PROJECT_PATH
      mkdir subprojects
      ADACORE_CI_SUBPROJECTS_ROOT=`pwd`/subprojects

      export GPR_PROJECT_PATH=`pwd`/subprojects/gnatdoc/gnat:$GPR_PROJECT_PATH
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/gnatdoc
      ADACORE_CI_SUBPROJECT_NAME=gnatdoc
    - !reference [.checkout]

    - |
      export GPR_PROJECT_PATH=`pwd`/subprojects/lsif-ada/gnat:$GPR_PROJECT_PATH
      ADACORE_CI_SUBPROJECT_REPOSITORY_URL_PATH=/eng/ide/lsif-ada
      ADACORE_CI_SUBPROJECT_NAME=lsif-ada
    - !reference [.checkout]

    - |
      anod install --sandbox-dir /it/wave stable-gnatall
      anod install --sandbox-dir /it/wave stable-langkit_support
      anod install --sandbox-dir /it/wave stable-libgpr2 --qualifier=bare
      anod install --sandbox-dir /it/wave stable-libadalang
      ( eval $(anod printenv --sandbox-dir /it/wave stable-gnatall) ;\
        eval $(anod printenv --sandbox-dir /it/wave stable-langkit_support) ;\
        eval $(anod printenv --sandbox-dir /it/wave stable-libgpr2 --qualifier=bare) ;\
        eval $(anod printenv --sandbox-dir /it/wave stable-libadalang) ;\
        make -C subprojects/lsif-ada; \
        ./subprojects/lsif-ada/bin/lsif-ada vss_documentation.gpr > dump.lsif)

  artifacts:
    reports:
      lsif: dump.lsif
